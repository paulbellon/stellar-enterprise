[gd_resource type="VisualShader" load_steps=29 format=2]

[sub_resource type="VisualShaderNodeColorOp" id=10]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeExpression" id=11]
size = Vector2( 479.28, 224.28 )
expression = "output = vec3(UV.x + time, UV.y + time, 1.0)"

[sub_resource type="VisualShaderNodeInput" id=20]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=21]
operator = 3

[sub_resource type="VisualShaderNodeScalarConstant" id=22]
constant = 60.0

[sub_resource type="VisualShaderNodeVectorOp" id=23]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=24]

[sub_resource type="VisualShaderNodeColorOp" id=25]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeExpression" id=26]
size = Vector2( 479.28, 224.28 )
expression = "output = vec3(UV.x + time, UV.y + time, 1.0)"

[sub_resource type="VisualShaderNodeInput" id=27]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=28]
operator = 3

[sub_resource type="VisualShaderNodeScalarConstant" id=29]
constant = 100.0

[sub_resource type="OpenSimplexNoise" id=30]
seed = 1
octaves = 6
period = 32.0
persistence = 0.4

[sub_resource type="NoiseTexture" id=31]
seamless = true
noise = SubResource( 30 )

[sub_resource type="VisualShaderNodeTexture" id=32]
texture = SubResource( 31 )
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id=33]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeFresnel" id=42]
output_port_for_preview = 0
default_input_values = [ 2, true, 3, 3.0 ]

[sub_resource type="VisualShaderNodeColorConstant" id=14]
constant = Color( 0.957312, 0.924802, 0.66937, 1 )

[sub_resource type="VisualShaderNodeInput" id=49]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=50]
input_name = "view"

[sub_resource type="VisualShaderNodeVectorDecompose" id=51]

[sub_resource type="VisualShaderNodeVectorDecompose" id=52]

[sub_resource type="VisualShaderNodeScalarOp" id=53]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=54]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=16]
constant = 2.0

[sub_resource type="OpenSimplexNoise" id=36]
octaves = 6
period = 32.0
persistence = 0.4

[sub_resource type="NoiseTexture" id=35]
seamless = true
noise = SubResource( 36 )

[sub_resource type="VisualShaderNodeTexture" id=19]
texture = SubResource( 35 )
texture_type = 1

[resource]
code = "shader_type spatial;
render_mode specular_disabled;

uniform sampler2D tex_frg_7 : hint_albedo;
uniform sampler2D tex_frg_24 : hint_albedo;



void vertex() {
// Output:0

}

void fragment() {
// Input:14
	float n_out14p0 = TIME;

// Scalar:16
	float n_out16p0 = 60.000000;

// ScalarOp:15
	float n_out15p0 = n_out14p0 / n_out16p0;

// Expression:13
	vec3 n_out13p0;
	n_out13p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out13p0 = vec3(UV.x + n_out15p0, UV.y + n_out15p0, 1.0)
	}

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, n_out13p0.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// ColorOp:12
	vec3 n_in12p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out12p0;
	{
		float base = n_out7p0.x;
		float blend = n_in12p1.x;
		if (base < 0.5) {
			n_out12p0.x = 2.0 * base * blend;
		} else {
			n_out12p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out7p0.y;
		float blend = n_in12p1.y;
		if (base < 0.5) {
			n_out12p0.y = 2.0 * base * blend;
		} else {
			n_out12p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out7p0.z;
		float blend = n_in12p1.z;
		if (base < 0.5) {
			n_out12p0.z = 2.0 * base * blend;
		} else {
			n_out12p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// VectorDecompose:42
	float n_out42p0 = n_out12p0.x;
	float n_out42p1 = n_out12p0.y;
	float n_out42p2 = n_out12p0.z;

// Input:21
	float n_out21p0 = TIME;

// Scalar:23
	float n_out23p0 = 100.000000;

// ScalarOp:22
	float n_out22p0 = n_out21p0 / n_out23p0;

// Expression:20
	vec3 n_out20p0;
	n_out20p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out20p0 = vec3(UV.x + n_out22p0, UV.y + n_out22p0, 1.0)
	}

// Texture:24
	vec4 tex_frg_24_read = texture(tex_frg_24, n_out20p0.xy);
	vec3 n_out24p0 = tex_frg_24_read.rgb;
	float n_out24p1 = tex_frg_24_read.a;

// ColorOp:19
	vec3 n_in19p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out19p0;
	{
		float base = n_out24p0.x;
		float blend = n_in19p1.x;
		if (base < 0.5) {
			n_out19p0.x = 2.0 * base * blend;
		} else {
			n_out19p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out24p0.y;
		float blend = n_in19p1.y;
		if (base < 0.5) {
			n_out19p0.y = 2.0 * base * blend;
		} else {
			n_out19p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out24p0.z;
		float blend = n_in19p1.z;
		if (base < 0.5) {
			n_out19p0.z = 2.0 * base * blend;
		} else {
			n_out19p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// VectorDecompose:43
	float n_out43p0 = n_out19p0.x;
	float n_out43p1 = n_out19p0.y;
	float n_out43p2 = n_out19p0.z;

// ScalarOp:44
	float n_out44p0 = n_out42p0 + n_out43p0;

// Input:40
	vec3 n_out40p0 = NORMAL;

// Input:41
	vec3 n_out41p0 = VIEW;

// Fresnel:32
	float n_in32p3 = 3.00000;
	float n_out32p0 = pow(clamp(dot(n_out40p0, n_out41p0), 0.0, 1.0), n_in32p3);

// ScalarOp:45
	float n_out45p0 = n_out44p0 * n_out32p0;

// Color:4
	vec3 n_out4p0 = vec3(0.957312, 0.924802, 0.669370);
	float n_out4p1 = 1.000000;

// Scalar:6
	float n_out6p0 = 2.000000;

// VectorCompose:18
	vec3 n_out18p0 = vec3(n_out6p0, n_out6p0, n_out6p0);

// VectorOp:17
	vec3 n_out17p0 = n_out4p0 * n_out18p0;

// Output:0
	ALPHA = n_out45p0;
	EMISSION = n_out17p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -972.264, -205.59 )
modes/specular = 4
nodes/fragment/0/position = Vector2( 400, 140 )
nodes/fragment/4/node = SubResource( 14 )
nodes/fragment/4/position = Vector2( -400, 580 )
nodes/fragment/6/node = SubResource( 16 )
nodes/fragment/6/position = Vector2( -580, 720 )
nodes/fragment/7/node = SubResource( 19 )
nodes/fragment/7/position = Vector2( -1480, -300 )
nodes/fragment/12/node = SubResource( 10 )
nodes/fragment/12/position = Vector2( -1200, -300 )
nodes/fragment/13/node = SubResource( 11 )
nodes/fragment/13/position = Vector2( -2020, -300 )
nodes/fragment/13/size = Vector2( 479.28, 224.28 )
nodes/fragment/13/input_ports = "0,0,time;"
nodes/fragment/13/output_ports = "0,1,output;"
nodes/fragment/13/expression = "output = vec3(UV.x + time, UV.y + time, 1.0)"
nodes/fragment/14/node = SubResource( 20 )
nodes/fragment/14/position = Vector2( -2560, -260 )
nodes/fragment/15/node = SubResource( 21 )
nodes/fragment/15/position = Vector2( -2320, -240 )
nodes/fragment/16/node = SubResource( 22 )
nodes/fragment/16/position = Vector2( -2560, -180 )
nodes/fragment/17/node = SubResource( 23 )
nodes/fragment/17/position = Vector2( -60, 600 )
nodes/fragment/18/node = SubResource( 24 )
nodes/fragment/18/position = Vector2( -340, 700 )
nodes/fragment/19/node = SubResource( 25 )
nodes/fragment/19/position = Vector2( -1200, -60 )
nodes/fragment/20/node = SubResource( 26 )
nodes/fragment/20/position = Vector2( -2020, -60 )
nodes/fragment/20/size = Vector2( 479.28, 224.28 )
nodes/fragment/20/input_ports = "0,0,time;"
nodes/fragment/20/output_ports = "0,1,output;"
nodes/fragment/20/expression = "output = vec3(UV.x + time, UV.y + time, 1.0)"
nodes/fragment/21/node = SubResource( 27 )
nodes/fragment/21/position = Vector2( -2540, -20 )
nodes/fragment/22/node = SubResource( 28 )
nodes/fragment/22/position = Vector2( -2320, 0 )
nodes/fragment/23/node = SubResource( 29 )
nodes/fragment/23/position = Vector2( -2560, 60 )
nodes/fragment/24/node = SubResource( 32 )
nodes/fragment/24/position = Vector2( -1460, -60 )
nodes/fragment/25/node = SubResource( 33 )
nodes/fragment/25/position = Vector2( -220, -620 )
nodes/fragment/32/node = SubResource( 42 )
nodes/fragment/32/position = Vector2( -880, 340 )
nodes/fragment/40/node = SubResource( 49 )
nodes/fragment/40/position = Vector2( -1340, 320 )
nodes/fragment/41/node = SubResource( 50 )
nodes/fragment/41/position = Vector2( -1198.19, 421.528 )
nodes/fragment/42/node = SubResource( 51 )
nodes/fragment/42/position = Vector2( -980, -280 )
nodes/fragment/43/node = SubResource( 52 )
nodes/fragment/43/position = Vector2( -980, -60 )
nodes/fragment/44/node = SubResource( 53 )
nodes/fragment/44/position = Vector2( -680, -140 )
nodes/fragment/45/node = SubResource( 54 )
nodes/fragment/45/position = Vector2( -240, 180 )
nodes/fragment/connections = PoolIntArray( 13, 0, 7, 0, 16, 0, 15, 1, 14, 0, 15, 0, 15, 0, 13, 0, 4, 0, 17, 0, 6, 0, 18, 0, 6, 0, 18, 1, 6, 0, 18, 2, 18, 0, 17, 1, 20, 0, 24, 0, 23, 0, 22, 1, 21, 0, 22, 0, 22, 0, 20, 0, 7, 0, 12, 0, 24, 0, 19, 0, 12, 0, 42, 0, 19, 0, 43, 0, 42, 0, 44, 0, 43, 0, 44, 1, 44, 0, 45, 0, 40, 0, 32, 0, 41, 0, 32, 1, 32, 0, 45, 1, 17, 0, 0, 5, 45, 0, 0, 1 )
