[gd_resource type="ShaderMaterial" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=7]

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "Intensity"

[sub_resource type="VisualShaderNodeFresnel" id=21]

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "view"

[sub_resource type="OpenSimplexNoise" id=10]
octaves = 2
period = 100.0
persistence = 0.0

[sub_resource type="NoiseTexture" id=20]
seamless = true
noise = SubResource( 10 )

[sub_resource type="VisualShaderNodeTexture" id=12]
texture = SubResource( 20 )

[sub_resource type="VisualShaderNodeExpression" id=13]
size = Vector2( 598, 252 )
expression = "out = vec3(UV.x + TIME * 0.2, UV.y + TIME * 0.2, 1.0)"

[sub_resource type="VisualShaderNodeVectorOp" id=14]

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=16]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id=18]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=19]
uniform_name = "Noise_Intensity"

[sub_resource type="VisualShader" id=6]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_vtx_2;
uniform float Noise_Intensity;
uniform float Intensity;



void vertex() {
// Expression:3
	vec3 n_out3p0;
	n_out3p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out3p0 = vec3(UV.x + TIME * 0.2, UV.y + TIME * 0.2, 1.0)
	}

// Texture:2
	vec4 tex_vtx_2_read = texture(tex_vtx_2, n_out3p0.xy);
	vec3 n_out2p0 = tex_vtx_2_read.rgb;
	float n_out2p1 = tex_vtx_2_read.a;

// ScalarUniform:9
	float n_out9p0 = Noise_Intensity;

// VectorOp:8
	vec3 n_out8p0 = n_out2p0 * vec3(n_out9p0);

// Input:7
	vec3 n_out7p0 = NORMAL;

// VectorOp:6
	vec3 n_out6p0 = n_out8p0 * n_out7p0;

// Input:5
	vec3 n_out5p0 = VERTEX;

// VectorOp:4
	vec3 n_out4p0 = n_out6p0 + n_out5p0;

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out2p1 = 1.000000;

// ScalarUniform:4
	float n_out4p0 = Intensity;

// VectorOp:3
	vec3 n_out3p0 = n_out2p0 * vec3(n_out4p0);

// Output:0
	EMISSION = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, 293 )
nodes/vertex/2/node = SubResource( 12 )
nodes/vertex/2/position = Vector2( -920, 60 )
nodes/vertex/3/node = SubResource( 13 )
nodes/vertex/3/position = Vector2( -1640, 100 )
nodes/vertex/3/size = Vector2( 598, 252 )
nodes/vertex/3/input_ports = ""
nodes/vertex/3/output_ports = "0,1,out;"
nodes/vertex/3/expression = "out = vec3(UV.x + TIME * 0.2, UV.y + TIME * 0.2, 1.0)"
nodes/vertex/4/node = SubResource( 14 )
nodes/vertex/4/position = Vector2( 155.014, 245.341 )
nodes/vertex/5/node = SubResource( 15 )
nodes/vertex/5/position = Vector2( -75.9856, 425.341 )
nodes/vertex/6/node = SubResource( 16 )
nodes/vertex/6/position = Vector2( -80, 200 )
nodes/vertex/7/node = SubResource( 17 )
nodes/vertex/7/position = Vector2( -280, 420 )
nodes/vertex/8/node = SubResource( 18 )
nodes/vertex/8/position = Vector2( -354.826, 146.821 )
nodes/vertex/9/node = SubResource( 19 )
nodes/vertex/9/position = Vector2( -600, 380 )
nodes/vertex/connections = PoolIntArray( 4, 0, 0, 0, 3, 0, 2, 0, 6, 0, 4, 0, 5, 0, 4, 1, 7, 0, 6, 1, 8, 0, 6, 0, 9, 0, 8, 1, 2, 0, 8, 0 )
nodes/fragment/0/position = Vector2( 400, 140 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -240, 180 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( 20, 220 )
nodes/fragment/4/node = SubResource( 9 )
nodes/fragment/4/position = Vector2( -260, 320 )
nodes/fragment/5/node = SubResource( 21 )
nodes/fragment/5/position = Vector2( -440, 440 )
nodes/fragment/6/node = SubResource( 22 )
nodes/fragment/6/position = Vector2( -783.08, 445.72 )
nodes/fragment/7/node = SubResource( 23 )
nodes/fragment/7/position = Vector2( -811.88, 536.44 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 5, 2, 0, 3, 0, 4, 0, 3, 1, 6, 0, 5, 0, 7, 0, 5, 1 )

[resource]
shader = SubResource( 6 )
shader_param/Noise_Intensity = 0.0
shader_param/Intensity = 1.0
